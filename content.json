{"meta":{"title":"Leo's Blog","subtitle":null,"description":null,"author":"LeoQtue","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Git 命令查询手册","slug":"learn_git","date":"2018-06-07T13:42:36.000Z","updated":"2018-06-07T17:48:37.496Z","comments":true,"path":"2018/06/07/learn_git/","link":"","permalink":"http://yoursite.com/2018/06/07/learn_git/","excerpt":"","text":"Git 命令查询手册(原作廖雪峰)全局登录 Git12$ git config --global user.name \"Your Name\"$ git config --global user.email \"email@example.com\" 创建版本库初始化一个 Git 仓库，使用 git init 命令。 添加文件到 Git 仓库，分两步： 使用命令 git add &lt;file&gt;，注意，可反复多次使用，添加多个文件； 使用命令 git commit -m &lt;message&gt;，完成。 时光机穿梭 要随时掌握工作区的状态，使用 git status 命令。 如果 git status 告诉你有文件被修改过，用 git diff &lt;file&gt; 可以查看修改内容。 版本回退 HEAD指向的版本就是当前版本，因此，Git 允许我们在版本的历史之间穿梭，使用命令 git reset --hard commit_id 或 git reset --hard &lt;HEAD^&gt; &lt;HEAD~n(number of steps)&gt;。 穿梭前，用 git log 或 git log --pretty=oneline 可以查看提交历史，以便确定要回退到哪个版本。 要重返未来，用 git reflog 查看命令历史，以便确定要回到未来的哪个版本。 工作区和暂存区 第一步是用 git add 把文件添加进去，实际上就是把文件修改添加到暂存区； 第二步是用 git commit 提交更改，实际上就是把暂存区的所有内容提交到当前分支。 工作区（Working Directory）就是你在电脑里能看到的目录，比如我的 learngit 文件夹就是一个工作区 版本库（Repository）工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库 管理修改每次修改，如果不用 git add 到暂存区，那就不会加入到 commit 中。 撤销修改 场景 1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 git checkout -- file 。 场景 2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 git reset HEAD &lt;file&gt; ，就回到了场景 1，第二步按场景 1 操作。 场景 3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。 删除文件 一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用 rm &lt;file&gt; 命令删除 git status 命令会立刻告诉你哪些文件被删除了 现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令 git rm 删掉，并且git commit git checkout -- &lt;file&gt; 用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以 “一键还原” 命令 git rm 用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。 远程仓库 第 1 步：创建 SSH Key。在用户主目录下，看看有没有 .ssh 目录，如果有，再看看这个目录下有没有私钥 id_rsa 和公钥 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开 Shell（Windows 下打开 Git Bash），创建 SSH Key： 1234567891011121314151617181920212223242526272829303132333435# 创建 SSH Key，安全起见，完成 SSH 连接后建议将私钥删除$ ssh-keygen -t rsa -b 4096 -C \"email@example.com\"# 下面使用 -f 参数对密钥进行命名，但不会在 .ssh 目录生成密钥$ ssh-keygen -t rsa -b 4096 -C \"email@example.com\" -f &lt;key name&gt;# 使用 -f 参数只能在当前目录生成密钥# 查看 ssh-agent 是否运行$ eval $(ssh-agent -s)Agent pid 59566# 将私钥导入 ssh-agent，默认生成的 key name 为 id_rsa$ ssh-add ~/.ssh/&lt;key name&gt;# 如果执行 ssh-add 报错，先运行下面的命令$ ssh-agent bash# 将公钥添加至 authorized_keys, 注意修改 USERS$ cp id_rsa.pub authorized_keys# 如果 SSH 连接时需要输入密码而无法连接，按以下步步骤来排除# 更改目录 .ssh 和 authorized_keys 文件的权限，否则 $ cd ~$ chmod 700 .ssh$ chmod 600 .ssh/authorized_keys# 查看加入的密钥列表# 如果执行 ssh-add 报错，先运行下面的命令$ ssh-agent bash$ ssh-add -l4096 SHA256:IpM7HTrUqk/6OIcFRC97AhFjyHsXu36SDg0WOykSpJg /home/USERS/.ssh/id_rsa (RSA)$ ssh-add -l -E md54096 MD5:35:7e:be:15:d2:75:cf:fa:ff:90:0e:f7:28:34:9d:f6 /home/leo/.ssh/id_rsa (RSA)# 测试连接 Github 情况，成功后就可以 clone 或 push 仓库了$ ssh -T git@github.com 第 2 步：登陆 GitHub，打开 “Account settings”，“SSH Keys” 页面：然后，点 “Add SSH Key”，填上任意 Title，在 Key 文本框里粘贴 id_rsa.pub 文件的内容 添加远程库 登陆 GitHub，然后，在右上角找到 “Create a new repo” 按钮，创建一个新的仓库 根据 GitHub 的提示，在本地的 learngit 仓库下运行命令： 123# 注意修改 Name 、 YourGit 为你自己的用户名和仓库名$ git remote add origin git@github.com:Name/YourGit.git$ git push -u origin master 要关联一个远程库，使用命令 git remote add origingit@server-name:path/repo-name.git 关联后，使用命令 git push -u origin master 第一次推送 master 分支的所有内容 此后，每次本地提交后，只要有必要，就可以使用命令 git push origin master 推送最新修改 从远程库克隆123# 注意修改 Name 和 Git$ git clone git@github.com:Name/Git.git# clone 后的目录为你当前所在的目录 要克隆一个仓库，首先必须知道仓库的地址，然后使用 git clone 命令克隆。 Git 支持多种协议，包括 https，但通过 ssh 支持的原生 git 协议速度最快。 分支管理分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习 Git 的时候，另一个你正在另一个平行宇宙里努力学习 SVN。 如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了 Git 又学会了 SVN！ 创建与合并分支Git 鼓励大量使用分支： 查看分支：git branch 创建分支：git branch &lt;name&gt; 切换分支：git checkout &lt;name&gt; 创建 + 切换分支：git checkout -b &lt;name&gt; 合并某分支到当前分支：git merge &lt;name&gt; 删除分支：git branch -d &lt;name&gt; 解决冲突当不同的分支都提交修改后，如果内容不一样，合并会出现冲突 当 Git 无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。 解决冲突就是把 Git 合并失败的文件手动编辑为我们希望的内容，再提交。 用 git log --graph --pretty=oneline --abbrev-commit 命令可以看到分支合并图。 分支管理策略 仍然创建并切换 dev 分支 修改 readme.md 文件，并提交一个新的 commit 现在，我们切换回 master 准备合并dev分支，请注意–no-ff参数，表示禁用 Fast forward ,因为本次合并要创建一个新的 commit，所以加上 -m 参数，把 commit 描述写进去。 1$ git merge --no-ff -m \"merge with no-ff\" dev 合并后，我们用 git log 看看分支历史： 1$ git log --graph --pretty=oneline --abbrev-commit Bug 分支暂停，以后再学习！","categories":[],"tags":[{"name":"Git, Github, SSH","slug":"Git-Github-SSH","permalink":"http://yoursite.com/tags/Git-Github-SSH/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-06-07T13:42:00.000Z","updated":"2018-06-07T17:52:54.713Z","comments":true,"path":"2018/06/07/hello-world/","link":"","permalink":"http://yoursite.com/2018/06/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"WIN10 子系统安装 HEXO 静态博客","slug":"win10_ubuntu","date":"2018-06-07T13:42:00.000Z","updated":"2018-06-07T18:02:24.419Z","comments":true,"path":"2018/06/07/win10_ubuntu/","link":"","permalink":"http://yoursite.com/2018/06/07/win10_ubuntu/","excerpt":"","text":"安装 win10 子系统 Ubuntu 设置 → 更新和安全 → 开发者选项 → 使用开发人员功能 → 勾选「开发人员模式」 控制面板 → 程序和功能 → 启用或关闭 Windows 功能 → 勾选「适用于 Linux 的 Windows 子系统」 重启系统 打开 Windows Stroe，下载 Ubuntu 即可 更换 root 用户密码安装完 ubuntu 后，每次开机 root 的密码都会随机改变，用下面的命令更改 root 的密码。 12345sudo passwd[sudo] password for 'YourName':Enter new UNIX password:Retype new UNIX password:passwd: password updated successfully 更换源 在资源管理器中找到 1C:\\Users\\用户名\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs\\etc\\apt\\sources.list 用编辑器打开 sources.list，将里面的内容全注释掉，在最后添加下面的代码： 1234567891011deb https://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse 然后执行升级命令 1sudo apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgrade 启用 SSH安装 SSH 12345678910111213141516171819202122# 安装 sshsudo apt-get install openssh-server# 备份 sshd_config 配置文件sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak# 编辑 sshd_config 内容：Port 2333 # 端口改为2333，22端口已被 windows 占用ListenAddress 0.0.0.0 # 取消注释#StrictModes yes # 注释PasswordAuthentication yes # 允许密码登录PermitRootLogin yes # 允许使用root登录# 启动 sshsudo service ssh start# 如果提示sshd error: could not load host key，则用下面的命令重新生成sudo rm /etc/ssh/ssh*keydpkg-reconfigure openssh-server# 再次启动 sshsudo service ssh start 生成 ssh key 在用户主目录下，看看有没有 .ssh 目录，如果有，再看看这个目录下有没有私钥 id_rsa 和公钥 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开 Shell（Windows 下打开 Git Bash），创建 SSH Key： 1234567891011121314151617181920212223242526272829303132# 创建 SSH Key，安全起见，完成 SSH 连接后建议将私钥删除$ ssh-keygen -t rsa -b 4096 -C \"email@example.com\"# 下面使用 -f 参数对密钥进行命名，但不会在 .ssh 目录生成密钥$ ssh-keygen -t rsa -b 4096 -C \"email@example.com\" -f &lt;key name&gt;# 使用 -f 参数只能在当前目录生成密钥# 查看 ssh-agent 是否运行$ eval $(ssh-agent -s)Agent pid 59566# 将私钥导入 ssh-agent，默认生成的 key name 为 id_rsa$ ssh-add ~/.ssh/&lt;key name&gt;# 如果执行 ssh-add 报错，先运行下面的命令$ ssh-agent bash# 将公钥添加至 authorized_keys, 注意修改 USERS$ cp id_rsa.pub authorized_keys# 如果 SSH 连接时需要输入密码而无法连接，按以下步步骤来排除# 更改目录 .ssh 和 authorized_keys 文件的权限，否则 $ cd ~$ chmod 700 .ssh$ chmod 600 .ssh/authorized_keys# 查看加入的密钥列表# 如果执行 ssh-add 报错，先运行下面的命令$ ssh-agent bash$ ssh-add -l4096 SHA256:IpM7HTrUqk/6OIcFRC97AhFjyHsXu36SDg0WOykSpJg /home/USERS/.ssh/id_rsa (RSA)$ ssh-add -l -E md54096 MD5:35:7e:be:15:d2:75:cf:fa:ff:90:0e:f7:28:34:9d:f6 /home/leo/.ssh/id_rsa (RSA) Xshell 导入私钥链接主机 主机：127.0.0.1 端口：2333 将 node 开发环境从 linux 迁移到 win10 bash on linux 安装 nvm： 1sudo curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash 安装 node 和 npm： 123nvm install stable# 等待安装完毕后，激活该版本：nvm use stable 解决 sudo npm 未找到命令： 12345678910111213$ touch .bash_profile //新建文件$ vim .bash_profile //打开文件# 将下面的内容复制到 .bash_profile 并保存export NVM_DIR=\"$HOME/.nvm\"[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\" # This loads nvm# 执行下面的命令$ source .bash_profile# 执行完毕，我们再看看是否安装成功$ nvm --version0.33.8 至此完成 linux 和 node 的安装。 安装 HEXO安装命令如下：1234567891011121314151617181920212223242526# 下载安装 hexo$ npm install hexo-cli -g# 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。$ hexo init blog# 下面的命令必须在 blog 目录下输入$ cd blog$ npm install# 清除缓存文件 (db.json) 和已生成的静态文件 (public)$ hexo clean# 部署之前预先生成静态文件$ hexo generate# 开启本地服务,在本地进行预览$ hexo server# 预览无问题后发布至 Github$ hexo deploy# 如果 deploy 出错，运行下面的代码$ hexo deployERROR Deployer not found: git$ npm install hexo-deployer-git --save 更换主题 Go to your blog’s root folder and clone Icarus into themes/icarus: 1git clone https://github.com/zthxxx/hexo-theme-icarus.git themes/icarus or fork this repository and install it as git submodule 1git submodule add https://github.com/&lt;your-username&gt;/hexo-theme-icarus.git themes/icarus Edit your blog’s _config.yml, change the theme field to icarus to enable this theme: 1theme: icarus Rename _config.yml.example in the theme folder to_config.yml. (Optional) Don’t forget to checkout the latest version once in a while: 123# 更新 icarus 主题cd themes/icarusgit pull (Optional) To enable Insight Search as your default search engine, you should also install hexo-generator-json-content from npm. 1npm install -S hexo-generator-json-content","categories":[],"tags":[{"name":"win10, linux, ubuntu, hexo, node.js","slug":"win10-linux-ubuntu-hexo-node-js","permalink":"http://yoursite.com/tags/win10-linux-ubuntu-hexo-node-js/"}]}]}